diff --git a/lib/src/phy/rf/rf_faux_imp.c b/lib/src/phy/rf/rf_faux_imp.c
index a45eb366..4dc4c95b 100644
--- a/lib/src/phy/rf/rf_faux_imp.c
+++ b/lib/src/phy/rf/rf_faux_imp.c
@@ -132,7 +132,7 @@ struct timeval g_tv_next = {0, 0};
 #define SAMPLES_PER_BYTE(x) ((x)/sizeof(cf_t))
 
 // target OTA PRB/SR 25(5.76) or 15(3.84)
-#define RF_FAUX_OTA_SRATE (5.76e6)
+#define RF_FAUX_OTA_SRATE (3.84e6)
 
 // max sf len
 #define RF_FAUX_SF_LEN (0x4000)
@@ -1133,7 +1133,7 @@ int rf_faux_recv_with_time(void *h, void *data, uint32_t nsamples,
    // read 1 sf
    const int nb_sf = BYTES_PER_SAMPLE(RF_FAUX_OTA_SRATE / 1000);
 
-   cf_t sf_in[RF_FAUX_SF_LEN] = {{0.0, 0.0}};
+   cf_t sf_in[RF_FAUX_SF_LEN] = {0.0, 0.0};
 
    int n_tries = rf_faux_is_ue(_info) ? 20 : 1;
 
diff --git a/srsenb/src/main.cc b/srsenb/src/main.cc
index 791c0131..0e7a035d 100644
--- a/srsenb/src/main.cc
+++ b/srsenb/src/main.cc
@@ -362,7 +362,6 @@ int main(int argc, char *argv[])
 
   srslte_debug_handle_crash(argc, argv);
 
-
   cout << "---  Software Radio Systems LTE eNodeB  ---" << endl << endl;
 
   parse_args(&args, argc, argv);
diff --git a/srsepc/hdr/hss/hss.h b/srsepc/hdr/hss/hss.h
index 4074aeb9..7817a65c 100644
--- a/srsepc/hdr/hss/hss.h
+++ b/srsepc/hdr/hss/hss.h
@@ -46,6 +46,8 @@ namespace srsepc{
 typedef struct{
   std::string auth_algo;
   std::string db_file;
+  uint16_t mcc;
+  uint16_t mnc;
 }hss_args_t;
 
 typedef struct{
@@ -89,6 +91,8 @@ private:
   static hss *m_instance;
 
   uint64_t                  m_sqn; //48 bits
+  uint16_t                  m_mcc;
+  uint16_t                  m_mnc;
   srslte::byte_buffer_pool *m_pool;
   std::ifstream m_db_file;
 
diff --git a/srsepc/src/hss/hss.cc b/srsepc/src/hss/hss.cc
index 5fc38307..9fb25bf9 100644
--- a/srsepc/src/hss/hss.cc
+++ b/srsepc/src/hss/hss.cc
@@ -90,6 +90,9 @@ hss::init(hss_args_t *hss_args, srslte::log_filter *hss_log)
     return -1;
   }
 
+  m_mcc = hss_args->mcc;
+  m_mnc = hss_args->mnc;
+
   m_hss_log->info("HSS Initialized. DB file %s, authentication algorithm %s\n", hss_args->db_file.c_str(),hss_args->auth_algo.c_str());
   m_hss_log->console("HSS Initialized\n");
   return 0;
@@ -203,9 +206,6 @@ hss::gen_auth_info_answer_milenage(uint64_t imsi, uint8_t *k_asme, uint8_t *autn
   uint8_t     ak[6];
   uint8_t     mac[8];
 
-  uint16_t  mcc=61441; //001
-  uint16_t  mnc=65281; //01
-
   if(!get_k_amf_op(imsi,k,amf,op))
   {
     return false;
@@ -233,8 +233,8 @@ hss::gen_auth_info_answer_milenage(uint64_t imsi, uint8_t *k_asme, uint8_t *autn
                             ik,
                             ak,
                             sqn,
-                            mcc,
-                            mnc,
+                            m_mcc,
+                            m_mnc,
                             k_asme);
 
   //Generate AUTN (autn = sqn ^ ak |+| amf |+| mac)
@@ -274,9 +274,6 @@ hss::gen_auth_info_answer_xor(uint64_t imsi, uint8_t *k_asme, uint8_t *autn, uin
   uint8_t     ak[6];
   uint8_t     mac[8];
 
-  uint16_t  mcc=61441; //001
-  uint16_t  mnc=65281; //01
-
   int i = 0;
 
   if(!get_k_amf_op(imsi,k,amf,op))
@@ -332,8 +329,8 @@ hss::gen_auth_info_answer_xor(uint64_t imsi, uint8_t *k_asme, uint8_t *autn, uin
                             ik,
                             ak,
                             sqn,
-                            mcc,
-                            mnc,
+                            m_mcc,
+                            m_mnc,
                             k_asme);
 
   //Generate AUTN (autn = sqn ^ ak |+| amf |+| mac)
diff --git a/srsepc/src/main.cc b/srsepc/src/main.cc
index f7047350..c80afcd5 100644
--- a/srsepc/src/main.cc
+++ b/srsepc/src/main.cc
@@ -200,6 +200,8 @@ parse_args(all_args_t *args, int argc, char* argv[]) {
   args->spgw_args.sgi_if_addr = sgi_if_addr;
   args->hss_args.db_file = hss_db_file;
   args->hss_args.auth_algo = hss_auth_algo;
+  args->hss_args.mcc = args->mme_args.s1ap_args.mcc;
+  args->hss_args.mnc = args->mme_args.s1ap_args.mnc;
 
   // Apply all_level to any unset layers
   if (vm.count("log.all_level")) {
